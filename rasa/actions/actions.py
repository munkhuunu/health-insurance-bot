from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
import psycopg2
import os
from dotenv import load_dotenv
from datetime import datetime

# Load environment variables
load_dotenv()
DB_CONFIG = {
    "dbname": os.getenv("DB_NAME"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "host": os.getenv("DB_HOST"),
    "port": os.getenv("DB_PORT"),
}

def get_db_connection():
    try:
        return psycopg2.connect(**DB_CONFIG)
    except Exception as e:
        print(f"‚ùå Database connection error: {e}")
        return None

class ActionGetHospitalInfo(Action):
    def name(self):
        return "action_get_hospital_info"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        icd10_name = tracker.get_slot("icd10_name")
        hospital_name = tracker.get_slot("hospital_name")
        conn = get_db_connection()
        if not conn:
            dispatcher.utter_message(text="–£—É—á–ª–∞–∞—Ä–∞–π, –¥–∞—Ç–∞–±–µ–π—Å—ç–¥ —Ö–æ–ª–±–æ–≥–¥–æ—Ö –±–æ–ª–æ–º–∂–≥“Ø–π –±–∞–π–Ω–∞.")
            return []
        
        try:
            with conn:
                with conn.cursor() as cursor:
                    if icd10_name:
                        cursor.execute("""
                            SELECT I.ICD10NAMEL, H.HS_NAME, H.HS_ADDRESS 
                            FROM ICD10CODE I 
                            JOIN DRG_ICD_MAPPING IM ON I.ICD10CODE = IM.ICD10CODE
                            JOIN DRGCODES D ON D.DRGCODE = IM.DRGCODE
                            JOIN CONTRACT C ON D.DRGCODE = C.DRGCODE
                            JOIN HOSPITAL H ON H.HOSPITAL_ID = C.HOSPITAL_ID
                            WHERE I.ICD10NAMEL LIKE %s
                            LIMIT 5
                        """, (f'%{icd10_name}%',))
                        results = cursor.fetchall()
                        if results:
                            hospital_list = [f"üè• {row[1]} - –•–∞—è–≥: {row[2]}" for row in results]
                            response = f"{icd10_name}-–≥ —ç–º—á–∏–ª–¥—ç–≥ –≥—ç—Ä—ç—ç—Ç —ç–º–Ω—ç–ª–≥“Ø“Ø–¥:\n" + "\n".join(hospital_list)
                        else:
                            response = f"{icd10_name}-–≥ —ç–º—á–∏–ª–¥—ç–≥ –≥—ç—Ä—ç—ç—Ç —ç–º–Ω—ç–ª—ç–≥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π."
                    elif hospital_name:
                        cursor.execute("""
                            SELECT HS_NAME, HAS_INSURANCE, HS_ADDRESS 
                            FROM HOSPITAL 
                            WHERE HS_NAME LIKE %s
                            LIMIT 1
                        """, (f'%{hospital_name}%',))
                        result = cursor.fetchone()
                        if result:
                            name, has_insurance, address = result
                            status = "–≥—ç—Ä—ç—ç—Ç" if has_insurance else "–≥—ç—Ä—ç—ç—Ç—ç–π –±–∏—à"
                            cursor.execute("""
                                SELECT C.DRGCODE 
                                FROM CONTRACT C 
                                WHERE C.HOSPITAL_ID = (SELECT HOSPITAL_ID FROM HOSPITAL WHERE HS_NAME LIKE %s) 
                                AND C.STATUS = 1
                                LIMIT 5
                            """, (f'%{hospital_name}%',))
                            contracts = cursor.fetchall()
                            contract_list = [contract[0] for contract in contracts] if contracts else []
                            response = f"{name} —ç–º–Ω—ç–ª—ç–≥ {status}. –•–∞—è–≥: {address}."
                            if has_insurance and contract_list:
                                response += f" –ì—ç—Ä—ç—ç—Ç DRG –∫–æ–¥: {', '.join(contract_list)}."
                            else:
                                response += " –ì—ç—Ä—ç—ç—Ç—ç–π DRG –∫–æ–¥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π."
                        else:
                            response = f"{hospital_name} —ç–º–Ω—ç–ª—ç–≥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π."
                    else:
                        response = "–ì—ç—Ä—ç—ç—Ç —ç–º–Ω—ç–ª–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ç–æ–¥—Ä—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –æ–Ω–æ—à —ç—Å–≤—ç–ª —ç–º–Ω—ç–ª–≥–∏–π–Ω –Ω—ç—Ä–∏–π–≥ –∑–∞–∞–∂ ”©–≥–Ω”© “Ø“Ø."

                    dispatcher.utter_message(text=response)
        except Exception as e:
            print(f"‚ùå Error fetching hospital info: {e}")
            dispatcher.utter_message(text="–£—É—á–ª–∞–∞—Ä–∞–π, –º—ç–¥—ç—ç–ª—ç–ª —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")
        finally:
            if conn:
                conn.close()
        return []

class ActionGetMedicineInfo(Action):
    def name(self):
        return "action_get_medicine_info"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        icd10_name = tracker.get_slot("icd10_name")
        tablet_name = tracker.get_slot("tablet_name")
        conn = get_db_connection()
        if not conn:
            dispatcher.utter_message(text="–£—É—á–ª–∞–∞—Ä–∞–π, –¥–∞—Ç–∞–±–µ–π—Å—ç–¥ —Ö–æ–ª–±–æ–≥–¥–æ—Ö –±–æ–ª–æ–º–∂–≥“Ø–π –±–∞–π–Ω–∞.")
            return []
        
        try:
            with conn:
                with conn.cursor() as cursor:
                    if icd10_name:
                        cursor.execute("""
                            SELECT I.ICD10NAMEL, T.TBLT_NAME_MON, T.TBLT_UNIT_DISAMT, T.TBLT_UNIT_PRICE 
                            FROM ICD10CODE I
                            JOIN TABLET_ICD_MAPPING TM ON SUBSTR(I.ICD10CODE, 1, 3) = SUBSTR(TM.ICD10CODE, 1, 3)
                            JOIN TABLET T ON TM.TBLT_ID = T.TBLT_ID
                            WHERE I.ICD10NAMEL LIKE %s
                            LIMIT 5
                        """, (f'%{icd10_name}%',))
                        results = cursor.fetchall()
                        if results:
                            medicine_list = [f"üíä {row[1]} (–•”©–Ω–≥”©–ª”©–ª—Ç: {row[2]}‚ÇÆ, “Æ–Ω—ç: {row[3]}‚ÇÆ)" for row in results]
                            response = f"{icd10_name}-–¥ —Ö—ç—Ä—ç–≥–ª—ç–≥–¥—ç—Ö —Ö”©–Ω–≥”©–ª”©–ª—Ç—Ç—ç–π —ç–º–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç:\n" + "\n".join(medicine_list)
                        else:
                            response = f"{icd10_name}-–¥ —Ö”©–Ω–≥”©–ª”©–ª—Ç—Ç—ç–π —ç–º –æ–ª–¥—Å–æ–Ω–≥“Ø–π."
                    elif tablet_name:
                        cursor.execute("""
                            SELECT TBLT_NAME_MON, TBLT_UNIT_DISAMT, TBLT_UNIT_PRICE 
                            FROM TABLET 
                            WHERE TBLT_NAME_MON LIKE %s
                            LIMIT 1
                        """, (f'%{tablet_name}%',))
                        result = cursor.fetchone()
                        if result:
                            name, discount, price = result
                            response = f"{name} —ç–º —Ö”©–Ω–≥”©–ª”©–ª—Ç—Ç—ç–π: {discount}‚ÇÆ (“Æ–Ω—ç: {price}‚ÇÆ). –ù”©—Ö—Ü”©–ª: –≠–ú–î-—Ç–∞–π –≥—ç—Ä—ç—ç—Ç —ç–º–Ω—ç–ª—ç–≥—Ç —Ö–∞–Ω–¥–∞—Ö–∞–¥ —Ö”©–Ω–≥”©–ª”©–ª—Ç—Ç—ç–π."
                        else:
                            response = f"{tablet_name} —ç–º –æ–ª–¥—Å–æ–Ω–≥“Ø–π."
                    else:
                        response = "–•”©–Ω–≥”©–ª”©–ª—Ç—Ç—ç–π —ç–º–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ç–æ–¥—Ä—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –æ–Ω–æ—à —ç—Å–≤—ç–ª —ç–º–∏–π–Ω –Ω—ç—Ä–∏–π–≥ –∑–∞–∞–∂ ”©–≥–Ω”© “Ø“Ø."

                    dispatcher.utter_message(text=response)
        except Exception as e:
            print(f"‚ùå Error fetching medicine info: {e}")
            dispatcher.utter_message(text="–£—É—á–ª–∞–∞—Ä–∞–π, –º—ç–¥—ç—ç–ª—ç–ª —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")
        finally:
            if conn:
                conn.close()
        return []

class ActionGetInsuranceFee(Action):
    def name(self):
        return "action_get_insurance_fee"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        year = tracker.get_slot("year") or "2025"  # Default 2025 –æ–Ω
        response = "–≠—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–Ω –¥–∞–∞—Ç–≥–∞–ª—ã–Ω —à–∏–º—Ç–≥—ç–ª–∏–π–Ω —Ö—ç–º–∂—ç—ç: \n"
        if year == "2019":
            response += "- 2019 –æ–Ω: –°–∞—Ä—ã–Ω 3,200 —Ç”©–≥—Ä”©–≥, –∂–∏–ª–∏–π–Ω 38,400 —Ç”©–≥—Ä”©–≥"
        elif year == "2020" or year == "2021" or year == "2022":
            response += "- 2020-2022 –æ–Ω: –°–∞—Ä—ã–Ω 4,200 —Ç”©–≥—Ä”©–≥, –∂–∏–ª–∏–π–Ω 50,400 —Ç”©–≥—Ä”©–≥"
        elif year == "2023":
            response += "- 2023 –æ–Ω: –°–∞—Ä—ã–Ω 5,500 —Ç”©–≥—Ä”©–≥, –∂–∏–ª–∏–π–Ω 66,000 —Ç”©–≥—Ä”©–≥"
        elif year == "2024":
            response += "- 2024 –æ–Ω: –°–∞—Ä—ã–Ω 6,600 —Ç”©–≥—Ä”©–≥, –∂–∏–ª–∏–π–Ω 79,200 —Ç”©–≥—Ä”©–≥"
        elif year == "2025":
            response += "- 2025 –æ–Ω: 1-3 —Å–∞—Ä—ã–Ω —Ö—É–≤—å–¥ —Å–∞—Ä—ã–Ω 13,200 —Ç”©–≥—Ä”©–≥, 4 —Å–∞—Ä–∞–∞—Å —ç—Ö–ª—ç–Ω —Å–∞—Ä—ã–Ω 15,840 —Ç”©–≥—Ä”©–≥"
        else:
            response += "–¢–æ–¥—Ä—É—É–ª—Å–∞–Ω –∂–∏–ª–¥ –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –•–∞–º–≥–∏–π–Ω —Å“Ø“Ø–ª–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª: 2025 –æ–Ω–¥ 1-3 —Å–∞—Ä—ã–Ω —Ö—É–≤—å–¥ —Å–∞—Ä—ã–Ω 13,200 —Ç”©–≥—Ä”©–≥, 4 —Å–∞—Ä–∞–∞—Å —ç—Ö–ª—ç–Ω —Å–∞—Ä—ã–Ω 15,840 —Ç”©–≥—Ä”©–≥."
        dispatcher.utter_message(text=response)
        return []

class ActionGetServices(Action):
    def name(self):
        return "action_get_services"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        response = "–≠—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–Ω –¥–∞–∞—Ç–≥–∞–ª–∞–∞—Ä –¥–∞—Ä–∞–∞—Ö —Ç—É—Å–ª–∞–º–∂, “Ø–π–ª—á–∏–ª–≥—ç—ç–≥ –∞–≤–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π: \n1. –•—ç–≤—Ç“Ø“Ø–ª—ç–Ω —ç–º—á–ª—ç—Ö —Ç—É—Å–ª–∞–º–∂ \n2. –ê–º–±—É–ª–∞—Ç–æ—Ä–∏–π–Ω —Ç—É—Å–ª–∞–º–∂ \n3. ”®–Ω–¥”©—Ä ”©—Ä—Ç”©–≥—Ç—ç–π –æ–Ω–æ—à–∏–ª–≥–æ–æ, —à–∏–Ω–∂–∏–ª–≥—ç—ç \n4. –Ø–∞—Ä–∞–ª—Ç–∞–π —Ç—É—Å–ª–∞–º–∂ \n5. –¢“Ø—Ä–≥—ç–Ω —Ç—É—Å–ª–∞–º–∂ \n6. –¢–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω \n7. ”®–¥—Ä–∏–π–Ω —ç–º—á–∏–ª–≥—ç—ç \n8. –î–∏–∞–ª–∏–∑—ã–Ω —Ç—É—Å–ª–∞–º–∂ \n9. –•–æ—Ä—Ç —Ö–∞–≤–¥—Ä—ã–Ω —Ö–∏–º–∏, —Ç—É—è–∞–Ω—ã ”©–¥—Ä–∏–π–Ω —ç–º—á–∏–ª–≥—ç—ç \n10. –°—ç—Ä–≥—ç—ç–Ω –∑–∞—Å–∞—Ö —Ç—É—Å–ª–∞–º–∂ \n11. –•”©–Ω–≥”©–≤—á–ª”©—Ö —Ç—É—Å–ª–∞–º–∂ \n12. –£–ª–∞–º–∂–ª–∞–ª—Ç –∞–Ω–∞–≥–∞–∞—Ö —É—Ö–∞–∞–Ω—ã —Ç—É—Å–ª–∞–º–∂ \n13. –≠–º–∏–π–Ω “Ø–Ω–∏–π–Ω —Ö”©–Ω–≥”©–ª”©–ª—Ç"
        dispatcher.utter_message(text=response)
        return []

class ActionGetInsuranceInfo(Action):
    def name(self):
        return "action_get_insurance_info"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain):
        conn = get_db_connection()
        if not conn:
            response = "–¢–∞–Ω—ã –¥–∞–∞—Ç–≥–∞–ª—ã–Ω —Ç–∞–ª–∞–∞—Ä –µ—Ä”©–Ω—Ö–∏–π –º—ç–¥—ç—ç–ª—ç–ª: –î–∞–∞—Ç–≥–∞–ª –Ω—å —ç–º–Ω—ç–ª—ç–≥, —ç–º–∏–π–Ω –∑–∞—Ä–¥–ª—ã–≥ —Ö–∞–º–∞—Ä–Ω–∞."
        else:
            try:
                with conn:
                    with conn.cursor() as cursor:
                        cursor.execute("SELECT icd10namel, icd10code, covered FROM ICD10CODE LIMIT 1")
                        result = cursor.fetchone()
                        if result:
                            icd_name, icd_code, covered = result
                            status = "—Ö“Ø—á–∏–Ω—Ç—ç–π" if covered else "—Ö“Ø—á–∏–Ω–≥“Ø–π"
                            response = f"–¢–∞–Ω—ã –¥–∞–∞—Ç–≥–∞–ª—ã–Ω —Ç–∞–ª–∞–∞—Ä –µ—Ä”©–Ω—Ö–∏–π –º—ç–¥—ç—ç–ª—ç–ª: –î–∞–∞—Ç–≥–∞–ª –Ω—å —ç–º–Ω—ç–ª—ç–≥, —ç–º–∏–π–Ω –∑–∞—Ä–¥–ª—ã–≥ —Ö–∞–º–∞—Ä–Ω–∞. –ñ–∏—à—ç—ç: {icd_name} (–∫–æ–¥: {icd_code}) –Ω—å –≠–ú–î-–¥ {status} –±–∞–π–Ω–∞."
                        else:
                            response = "–¢–∞–Ω—ã –¥–∞–∞—Ç–≥–∞–ª—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π."
            except Exception as e:
                print(f"‚ùå Error fetching insurance info: {e}")
                response = "–¢–∞–Ω—ã –¥–∞–∞—Ç–≥–∞–ª—ã–Ω —Ç–∞–ª–∞–∞—Ä –µ—Ä”©–Ω—Ö–∏–π –º—ç–¥—ç—ç–ª—ç–ª: –î–∞–∞—Ç–≥–∞–ª –Ω—å —ç–º–Ω—ç–ª—ç–≥, —ç–º–∏–π–Ω –∑–∞—Ä–¥–ª—ã–≥ —Ö–∞–º–∞—Ä–Ω–∞."
            finally:
                conn.close()
        dispatcher.utter_message(text=response)
        return []

class ActionSaveUnansweredQuestion(Action):
    def name(self):
        return "action_save_unanswered_question"

    def run(self, dispatcher, tracker, domain):
        question = tracker.latest_message['text']
        conn = get_db_connection()
        if not conn:
            dispatcher.utter_message(text="–£—É—á–ª–∞–∞—Ä–∞–π, –¥–∞—Ç–∞–±–µ–π—Å—ç–¥ —Ö–æ–ª–±–æ–≥–¥–æ—Ö –±–æ–ª–æ–º–∂–≥“Ø–π –±–∞–π–Ω–∞.")
            return []
        
        try:
            with conn:
                with conn.cursor() as cursor:
                    cursor.execute("INSERT INTO unanswered_questions (question) VALUES (%s)", (question,))
                    conn.commit()
        except Exception as e:
            print(f"‚ùå Error saving unanswered question: {e}")
        finally:
            if conn:
                conn.close()
        dispatcher.utter_message(text="–£—É—á–ª–∞–∞—Ä–∞–π, –±–∏ —ç–Ω—ç –∞—Å—É—É–ª—Ç–∞–¥ —Ö–∞—Ä–∏—É ”©–≥—á —á–∞–¥–∞–∞–≥“Ø–π. –¢–∞–Ω—ã –∞—Å—É—É–ª—Ç—ã–≥ –±“Ø—Ä—Ç–≥–µ–ª—ç—ç, –±–∏–¥ –∏–ª“Ø“Ø —Å–∞–π–∂—Ä—É—É–ª–Ω–∞.")
        return []